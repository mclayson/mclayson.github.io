{"ast":null,"code":"import _classCallCheck from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { createSVG } from './svg_utils';\n\nvar Arrow =\n/*#__PURE__*/\nfunction () {\n  function Arrow(gantt, from_task, to_task) {\n    _classCallCheck(this, Arrow);\n\n    this.gantt = gantt;\n    this.from_task = from_task;\n    this.to_task = to_task;\n    this.calculate_path();\n    this.draw();\n  }\n\n  _createClass(Arrow, [{\n    key: \"calculate_path\",\n    value: function calculate_path() {\n      var _this = this;\n\n      var start_x = this.from_task.$bar.getX() + this.from_task.$bar.getWidth() / 2;\n\n      var condition = function condition() {\n        return _this.to_task.$bar.getX() < start_x + _this.gantt.options.padding && start_x > _this.from_task.$bar.getX() + _this.gantt.options.padding;\n      };\n\n      while (condition()) {\n        start_x -= 10;\n      }\n\n      var start_y = this.gantt.options.header_height + this.gantt.options.bar_height + (this.gantt.options.padding + this.gantt.options.bar_height) * this.from_task.task._index + this.gantt.options.padding;\n      var end_x = this.to_task.$bar.getX() - this.gantt.options.padding / 2;\n      var end_y = this.gantt.options.header_height + this.gantt.options.bar_height / 2 + (this.gantt.options.padding + this.gantt.options.bar_height) * this.to_task.task._index + this.gantt.options.padding;\n      var from_is_below_to = this.from_task.task._index > this.to_task.task._index;\n      var curve = this.gantt.options.arrow_curve;\n      var clockwise = from_is_below_to ? 1 : 0;\n      var curve_y = from_is_below_to ? -curve : curve;\n      var offset = from_is_below_to ? end_y + this.gantt.options.arrow_curve : end_y - this.gantt.options.arrow_curve;\n      this.path = \"\\n            M \".concat(start_x, \" \").concat(start_y, \"\\n            V \").concat(offset, \"\\n            a \").concat(curve, \" \").concat(curve, \" 0 0 \").concat(clockwise, \" \").concat(curve, \" \").concat(curve_y, \"\\n            L \").concat(end_x, \" \").concat(end_y, \"\\n            m -5 -5\\n            l 5 5\\n            l -5 5\");\n\n      if (this.to_task.$bar.getX() < this.from_task.$bar.getX() + this.gantt.options.padding) {\n        var down_1 = this.gantt.options.padding / 2 - curve;\n        var down_2 = this.to_task.$bar.getY() + this.to_task.$bar.getHeight() / 2 - curve_y;\n        var left = this.to_task.$bar.getX() - this.gantt.options.padding;\n        this.path = \"\\n                M \".concat(start_x, \" \").concat(start_y, \"\\n                v \").concat(down_1, \"\\n                a \").concat(curve, \" \").concat(curve, \" 0 0 1 -\").concat(curve, \" \").concat(curve, \"\\n                H \").concat(left, \"\\n                a \").concat(curve, \" \").concat(curve, \" 0 0 \").concat(clockwise, \" -\").concat(curve, \" \").concat(curve_y, \"\\n                V \").concat(down_2, \"\\n                a \").concat(curve, \" \").concat(curve, \" 0 0 \").concat(clockwise, \" \").concat(curve, \" \").concat(curve_y, \"\\n                L \").concat(end_x, \" \").concat(end_y, \"\\n                m -5 -5\\n                l 5 5\\n                l -5 5\");\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      this.element = createSVG('path', {\n        d: this.path,\n        'data-from': this.from_task.task.id,\n        'data-to': this.to_task.task.id\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.calculate_path();\n      this.element.setAttribute('d', this.path);\n    }\n  }]);\n\n  return Arrow;\n}();\n\nexport { Arrow as default };","map":null,"metadata":{},"sourceType":"module"}