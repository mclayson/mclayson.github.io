{"ast":null,"code":"import _classCallCheck from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport date_utils from './date_utils';\nimport { $, createSVG, animateSVG } from './svg_utils';\n\nvar Bar =\n/*#__PURE__*/\nfunction () {\n  function Bar(gantt, task) {\n    _classCallCheck(this, Bar);\n\n    this.set_defaults(gantt, task);\n    this.prepare();\n    this.draw();\n    this.bind();\n  }\n\n  _createClass(Bar, [{\n    key: \"set_defaults\",\n    value: function set_defaults(gantt, task) {\n      this.action_completed = false;\n      this.gantt = gantt;\n      this.task = task;\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare() {\n      this.prepare_values();\n      this.prepare_helpers();\n    }\n  }, {\n    key: \"prepare_values\",\n    value: function prepare_values() {\n      this.invalid = this.task.invalid;\n      this.height = this.gantt.options.bar_height;\n      this.x = this.compute_x();\n      this.y = this.compute_y();\n      this.corner_radius = this.gantt.options.bar_corner_radius;\n      this.duration = date_utils.diff(this.task._end, this.task._start, 'hour') / this.gantt.options.step;\n      this.width = this.gantt.options.column_width * this.duration;\n      this.progress_width = this.gantt.options.column_width * this.duration * (this.task.progress / 100) || 0;\n      this.group = createSVG('g', {\n        class: 'bar-wrapper ' + (this.task.custom_class || ''),\n        'data-id': this.task.id\n      });\n      this.bar_group = createSVG('g', {\n        class: 'bar-group',\n        append_to: this.group\n      });\n      this.handle_group = createSVG('g', {\n        class: 'handle-group',\n        append_to: this.group\n      });\n    }\n  }, {\n    key: \"prepare_helpers\",\n    value: function prepare_helpers() {\n      SVGElement.prototype.getX = function () {\n        return +this.getAttribute('x');\n      };\n\n      SVGElement.prototype.getY = function () {\n        return +this.getAttribute('y');\n      };\n\n      SVGElement.prototype.getWidth = function () {\n        return +this.getAttribute('width');\n      };\n\n      SVGElement.prototype.getHeight = function () {\n        return +this.getAttribute('height');\n      };\n\n      SVGElement.prototype.getEndX = function () {\n        return this.getX() + this.getWidth();\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      this.draw_bar();\n      this.draw_progress_bar();\n      this.draw_label();\n      this.draw_resize_handles();\n    }\n  }, {\n    key: \"draw_bar\",\n    value: function draw_bar() {\n      this.$bar = createSVG('rect', {\n        x: this.x,\n        y: this.y,\n        width: this.width,\n        height: this.height,\n        rx: this.corner_radius,\n        ry: this.corner_radius,\n        class: 'bar',\n        append_to: this.bar_group\n      });\n      animateSVG(this.$bar, 'width', 0, this.width);\n\n      if (this.invalid) {\n        this.$bar.classList.add('bar-invalid');\n      }\n    }\n  }, {\n    key: \"draw_progress_bar\",\n    value: function draw_progress_bar() {\n      if (this.invalid) return;\n      this.$bar_progress = createSVG('rect', {\n        x: this.x,\n        y: this.y,\n        width: this.progress_width,\n        height: this.height,\n        rx: this.corner_radius,\n        ry: this.corner_radius,\n        class: 'bar-progress',\n        append_to: this.bar_group\n      });\n      animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\n    }\n  }, {\n    key: \"draw_label\",\n    value: function draw_label() {\n      var _this = this;\n\n      createSVG('text', {\n        x: this.x + this.width / 2,\n        y: this.y + this.height / 2,\n        innerHTML: this.task.name,\n        class: 'bar-label',\n        append_to: this.bar_group\n      }); // labels get BBox in the next tick\n\n      requestAnimationFrame(function () {\n        return _this.update_label_position();\n      });\n    }\n  }, {\n    key: \"draw_resize_handles\",\n    value: function draw_resize_handles() {\n      if (this.invalid) return;\n      var bar = this.$bar;\n      var handle_width = 8;\n      createSVG('rect', {\n        x: bar.getX() + bar.getWidth() - 9,\n        y: bar.getY() + 1,\n        width: handle_width,\n        height: this.height - 2,\n        rx: this.corner_radius,\n        ry: this.corner_radius,\n        class: 'handle right',\n        append_to: this.handle_group\n      });\n      createSVG('rect', {\n        x: bar.getX() + 1,\n        y: bar.getY() + 1,\n        width: handle_width,\n        height: this.height - 2,\n        rx: this.corner_radius,\n        ry: this.corner_radius,\n        class: 'handle left',\n        append_to: this.handle_group\n      });\n\n      if (this.task.progress && this.task.progress < 100) {\n        this.$handle_progress = createSVG('polygon', {\n          points: this.get_progress_polygon_points().join(','),\n          class: 'handle progress',\n          append_to: this.handle_group\n        });\n      }\n    }\n  }, {\n    key: \"get_progress_polygon_points\",\n    value: function get_progress_polygon_points() {\n      var bar_progress = this.$bar_progress;\n      return [bar_progress.getEndX() - 5, bar_progress.getY() + bar_progress.getHeight(), bar_progress.getEndX() + 5, bar_progress.getY() + bar_progress.getHeight(), bar_progress.getEndX(), bar_progress.getY() + bar_progress.getHeight() - 8.66];\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      if (this.invalid) return;\n      this.setup_click_event();\n    }\n  }, {\n    key: \"setup_click_event\",\n    value: function setup_click_event() {\n      var _this2 = this;\n\n      $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, function (e) {\n        if (_this2.action_completed) {\n          // just finished a move action, wait for a few seconds\n          return;\n        }\n\n        if (e.type === 'click') {\n          _this2.gantt.trigger_event('click', [_this2.task]);\n        }\n\n        _this2.gantt.unselect_all();\n\n        _this2.group.classList.toggle('active');\n\n        _this2.show_popup();\n      });\n    }\n  }, {\n    key: \"show_popup\",\n    value: function show_popup() {\n      if (this.gantt.bar_being_dragged) return;\n      var start_date = date_utils.format(this.task._start, 'MMM D');\n      var end_date = date_utils.format(date_utils.add(this.task._end, -1, 'second'), 'MMM D');\n      var subtitle = start_date + ' - ' + end_date;\n      this.gantt.show_popup({\n        target_element: this.$bar,\n        title: this.task.name,\n        subtitle: subtitle,\n        task: this.task\n      });\n    }\n  }, {\n    key: \"update_bar_position\",\n    value: function update_bar_position(_ref) {\n      var _this3 = this;\n\n      var _ref$x = _ref.x,\n          x = _ref$x === void 0 ? null : _ref$x,\n          _ref$width = _ref.width,\n          width = _ref$width === void 0 ? null : _ref$width;\n      var bar = this.$bar;\n\n      if (x) {\n        // get all x values of parent task\n        var xs = this.task.dependencies.map(function (dep) {\n          return _this3.gantt.get_bar(dep).$bar.getX();\n        }); // child task must not go before parent\n\n        var valid_x = xs.reduce(function (prev, curr) {\n          return x >= curr;\n        }, x);\n\n        if (!valid_x) {\n          width = null;\n          return;\n        }\n\n        this.update_attr(bar, 'x', x);\n      }\n\n      if (width && width >= this.gantt.options.column_width) {\n        this.update_attr(bar, 'width', width);\n      }\n\n      this.update_label_position();\n      this.update_handle_position();\n      this.update_progressbar_position();\n      this.update_arrow_position();\n    }\n  }, {\n    key: \"date_changed\",\n    value: function date_changed() {\n      var changed = false;\n\n      var _this$compute_start_e = this.compute_start_end_date(),\n          new_start_date = _this$compute_start_e.new_start_date,\n          new_end_date = _this$compute_start_e.new_end_date;\n\n      if (Number(this.task._start) !== Number(new_start_date)) {\n        changed = true;\n        this.task._start = new_start_date;\n      }\n\n      if (Number(this.task._end) !== Number(new_end_date)) {\n        changed = true;\n        this.task._end = new_end_date;\n      }\n\n      if (!changed) return;\n      this.gantt.trigger_event('date_change', [this.task, new_start_date, date_utils.add(new_end_date, -1, 'second')]);\n    }\n  }, {\n    key: \"progress_changed\",\n    value: function progress_changed() {\n      var new_progress = this.compute_progress();\n      this.task.progress = new_progress;\n      this.gantt.trigger_event('progress_change', [this.task, new_progress]);\n    }\n  }, {\n    key: \"set_action_completed\",\n    value: function set_action_completed() {\n      var _this4 = this;\n\n      this.action_completed = true;\n      setTimeout(function () {\n        return _this4.action_completed = false;\n      }, 1000);\n    }\n  }, {\n    key: \"compute_start_end_date\",\n    value: function compute_start_end_date() {\n      var bar = this.$bar;\n      var x_in_units = bar.getX() / this.gantt.options.column_width;\n      var new_start_date = date_utils.add(this.gantt.gantt_start, x_in_units * this.gantt.options.step, 'hour');\n      var width_in_units = bar.getWidth() / this.gantt.options.column_width;\n      var new_end_date = date_utils.add(new_start_date, width_in_units * this.gantt.options.step, 'hour');\n      return {\n        new_start_date: new_start_date,\n        new_end_date: new_end_date\n      };\n    }\n  }, {\n    key: \"compute_progress\",\n    value: function compute_progress() {\n      var progress = this.$bar_progress.getWidth() / this.$bar.getWidth() * 100;\n      return parseInt(progress, 10);\n    }\n  }, {\n    key: \"compute_x\",\n    value: function compute_x() {\n      var _this$gantt$options = this.gantt.options,\n          step = _this$gantt$options.step,\n          column_width = _this$gantt$options.column_width;\n      var task_start = this.task._start;\n      var gantt_start = this.gantt.gantt_start;\n      var diff = date_utils.diff(task_start, gantt_start, 'hour');\n      var x = diff / step * column_width;\n\n      if (this.gantt.view_is('Month')) {\n        var _diff = date_utils.diff(task_start, gantt_start, 'day');\n\n        x = _diff * column_width / 30;\n      }\n\n      return x;\n    }\n  }, {\n    key: \"compute_y\",\n    value: function compute_y() {\n      return this.gantt.options.header_height + this.gantt.options.padding + this.task._index * (this.height + this.gantt.options.padding);\n    }\n  }, {\n    key: \"get_snap_position\",\n    value: function get_snap_position(dx) {\n      var odx = dx,\n          rem,\n          position;\n\n      if (this.gantt.view_is('Week')) {\n        rem = dx % (this.gantt.options.column_width / 7);\n        position = odx - rem + (rem < this.gantt.options.column_width / 14 ? 0 : this.gantt.options.column_width / 7);\n      } else if (this.gantt.view_is('Month')) {\n        rem = dx % (this.gantt.options.column_width / 30);\n        position = odx - rem + (rem < this.gantt.options.column_width / 60 ? 0 : this.gantt.options.column_width / 30);\n      } else {\n        rem = dx % this.gantt.options.column_width;\n        position = odx - rem + (rem < this.gantt.options.column_width / 2 ? 0 : this.gantt.options.column_width);\n      }\n\n      return position;\n    }\n  }, {\n    key: \"update_attr\",\n    value: function update_attr(element, attr, value) {\n      value = +value;\n\n      if (!isNaN(value)) {\n        element.setAttribute(attr, value);\n      }\n\n      return element;\n    }\n  }, {\n    key: \"update_progressbar_position\",\n    value: function update_progressbar_position() {\n      this.$bar_progress.setAttribute('x', this.$bar.getX());\n      this.$bar_progress.setAttribute('width', this.$bar.getWidth() * (this.task.progress / 100));\n    }\n  }, {\n    key: \"update_label_position\",\n    value: function update_label_position() {\n      var bar = this.$bar,\n          label = this.group.querySelector('.bar-label');\n\n      if (label.getBBox().width > bar.getWidth()) {\n        label.classList.add('big');\n        label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\n      } else {\n        label.classList.remove('big');\n        label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\n      }\n    }\n  }, {\n    key: \"update_handle_position\",\n    value: function update_handle_position() {\n      var bar = this.$bar;\n      this.handle_group.querySelector('.handle.left').setAttribute('x', bar.getX() + 1);\n      this.handle_group.querySelector('.handle.right').setAttribute('x', bar.getEndX() - 9);\n      var handle = this.group.querySelector('.handle.progress');\n      handle && handle.setAttribute('points', this.get_progress_polygon_points());\n    }\n  }, {\n    key: \"update_arrow_position\",\n    value: function update_arrow_position() {\n      this.arrows = this.arrows || [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.arrows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var arrow = _step.value;\n          arrow.update();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return Bar;\n}();\n\nexport { Bar as default };\n\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}","map":null,"metadata":{},"sourceType":"module"}