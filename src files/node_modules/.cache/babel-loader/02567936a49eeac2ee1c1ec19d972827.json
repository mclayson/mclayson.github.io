{"ast":null,"code":"import _classCallCheck from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/matt/Work/Projul/projul-prototype/src/components/user-heatmap-dates.js\";\nimport React from 'react';\nimport { DaysInMonth, SameDay } from '../utilities/date';\nimport { WeekDaysShort } from '../utilities/content';\n\nvar UserHeatmapDates =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserHeatmapDates, _React$Component);\n\n  function UserHeatmapDates() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UserHeatmapDates);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UserHeatmapDates)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selected_day: 0\n    };\n\n    _this.handleDayClick = function (e) {\n      var id = parseInt(e.currentTarget.dataset.id, 10);\n\n      _this.props.handleDayClick(id);\n    };\n\n    return _this;\n  }\n\n  _createClass(UserHeatmapDates, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.selected_day && this.props.selected_day !== prevProps.selected_day) {\n        this.setState({\n          selected_day: this.props.selected_day\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var cells = [];\n      var day_cells = [];\n\n      for (var i = 0; i < DaysInMonth(this.props.month, this.props.year); i++) {\n        var current_date = new Date(this.props.year, this.props.month, i + 1);\n        cells.push(React.createElement(\"li\", {\n          key: i + 1,\n          \"data-id\": i + 1,\n          className: \"cell\" + (current_date.toDateString() === new Date().toDateString() ? \" today\" : \"\") + (this.props.selected_job_data.start_date && SameDay(this.props.selected_job_data.start_date, current_date) ? \" assigned\" : \"\"),\n          onClick: this.handleDayClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, i + 1), React.createElement(\"small\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, WeekDaysShort[current_date.getDay()])));\n      }\n\n      if (this.state.selected_day) {\n        for (var h = 0; h < 24; h++) {\n          var current_time = new Date(this.props.year, this.props.month, this.state.selected_day, h);\n          day_cells.push(React.createElement(\"li\", {\n            key: h,\n            className: \"day-cell\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48\n            },\n            __self: this\n          }, (current_time.getHours() % 12 || 12) + \" \" + (current_time.getHours() >= 12 ? \"pm\" : \"am\"))));\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"user-schedule heatmap-dates\" + (this.props.selected_day ? \" show-day\" : \"\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, this.props.selected_day ? React.createElement(\"ul\", {\n        className: \"day-schedule\",\n        style: {// transformOrigin: ((this.state.selected_day/DaysInMonth(this.props.month, this.props.year))*100) + \"% 0\"\n          // transition: \"opacity .5s ease, transform 0s ease 1s\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, day_cells) : React.createElement(\"ul\", {\n        className: \"month-schedule\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, cells));\n    }\n  }]);\n\n  return UserHeatmapDates;\n}(React.Component);\n\nexport default UserHeatmapDates;","map":{"version":3,"sources":["/Users/matt/Work/Projul/projul-prototype/src/components/user-heatmap-dates.js"],"names":["React","DaysInMonth","SameDay","WeekDaysShort","UserHeatmapDates","state","selected_day","handleDayClick","e","id","parseInt","currentTarget","dataset","props","prevProps","setState","cells","day_cells","i","month","year","current_date","Date","push","toDateString","selected_job_data","start_date","getDay","h","current_time","getHours","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {DaysInMonth, SameDay} from '../utilities/date'\nimport {WeekDaysShort} from '../utilities/content'\n\nclass UserHeatmapDates extends React.Component {\n  state = {\n    selected_day: 0\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selected_day && this.props.selected_day !== prevProps.selected_day) {\n      this.setState({\n        selected_day: this.props.selected_day\n      });\n    }\n  }\n\n  handleDayClick = (e) => {\n    const id=parseInt(e.currentTarget.dataset.id,10);\n    this.props.handleDayClick(id)\n  }\n\n  render() {\n    const cells = [];\n    const day_cells = [];\n\n    for (var i=0; i<DaysInMonth(this.props.month, this.props.year); i++) {\n      var current_date = new Date(this.props.year, this.props.month, (i+1));\n      cells.push((\n        <li key={i+1} data-id={(i+1)} className={\n          \"cell\" +\n          ((current_date.toDateString() === (new Date()).toDateString()) ? \" today\" : \"\") +\n          (this.props.selected_job_data.start_date && SameDay(this.props.selected_job_data.start_date, current_date) ? \" assigned\" : \"\")\n        } onClick={this.handleDayClick}>\n          <span>{i+1}</span>\n          <small>{WeekDaysShort[current_date.getDay()]}</small>\n        </li>\n      ));\n    }\n\n    if (this.state.selected_day) {\n      for (var h=0; h<24; h++) {\n        const current_time = new Date(this.props.year, this.props.month, this.state.selected_day, h);\n        day_cells.push((\n          <li key={h} className={\n            \"day-cell\"\n          }>\n            <span>{(current_time.getHours() % 12 || 12) + \" \" + (current_time.getHours() >= 12 ? \"pm\" : \"am\")}</span>\n          </li>\n        ));\n      }\n    }\n\n    return (\n      <div className={\"user-schedule heatmap-dates\" + (this.props.selected_day ? \" show-day\" : \"\")}>\n        { this.props.selected_day ? (\n            <ul className={\"day-schedule\"}\n              style={{\n                // transformOrigin: ((this.state.selected_day/DaysInMonth(this.props.month, this.props.year))*100) + \"% 0\"\n                // transition: \"opacity .5s ease, transform 0s ease 1s\"\n              }}>\n              {day_cells}\n            </ul>\n          ):(\n            <ul className={\"month-schedule\"}>\n              {cells}\n            </ul>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default UserHeatmapDates\n"]},"metadata":{},"sourceType":"module"}