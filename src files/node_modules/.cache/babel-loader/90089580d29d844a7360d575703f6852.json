{"ast":null,"code":"import _defineProperty from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _construct from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar YEAR = 'year';\nvar MONTH = 'month';\nvar DAY = 'day';\nvar HOUR = 'hour';\nvar MINUTE = 'minute';\nvar SECOND = 'second';\nvar MILLISECOND = 'millisecond';\nvar month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport default {\n  parse: function parse(date) {\n    var date_separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n    var time_separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ':';\n\n    if (date instanceof Date) {\n      return date;\n    }\n\n    if (typeof date === 'string') {\n      var date_parts, time_parts;\n      var parts = date.split(' ');\n      date_parts = parts[0].split(date_separator).map(function (val) {\n        return parseInt(val, 10);\n      });\n      time_parts = parts[1] && parts[1].split(time_separator); // month is 0 indexed\n\n      date_parts[1] = date_parts[1] - 1;\n      var vals = date_parts;\n\n      if (time_parts && time_parts.length) {\n        vals = vals.concat(time_parts);\n      }\n\n      return _construct(Date, _toConsumableArray(vals));\n    }\n  },\n  to_string: function to_string(date) {\n    var with_time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!(date instanceof Date)) {\n      throw new TypeError('Invalid argument type');\n    }\n\n    var vals = this.get_date_values(date).map(function (val, i) {\n      if (i === 1) {\n        // add 1 for month\n        val = val + 1;\n      }\n\n      return padStart(val + '', 2, '0');\n    });\n    var date_string = \"\".concat(vals[0], \"-\").concat(vals[1], \"-\").concat(vals[2]);\n    var time_string = \"\".concat(vals[3], \":\").concat(vals[4], \":\").concat(vals[5]);\n    return date_string + (with_time ? ' ' + time_string : '');\n  },\n  format: function format(date) {\n    var format_string = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD HH:mm:ss';\n    var values = this.get_date_values(date).map(function (d) {\n      return padStart(d, 2, 0);\n    });\n    var format_map = {\n      YYYY: values[0],\n      MM: padStart(+values[1] + 1, 2, 0),\n      DD: values[2],\n      HH: values[3],\n      mm: values[4],\n      ss: values[5],\n      D: values[2],\n      MMMM: month_names[+values[1]],\n      MMM: month_names[+values[1]]\n    };\n    var str = format_string;\n    var formatted_values = [];\n    Object.keys(format_map).sort(function (a, b) {\n      return b.length - a.length;\n    }) // big string first\n    .forEach(function (key) {\n      if (str.includes(key)) {\n        str = str.replace(key, \"$\".concat(formatted_values.length));\n        formatted_values.push(format_map[key]);\n      }\n    });\n    formatted_values.forEach(function (value, i) {\n      str = str.replace(\"$\".concat(i), value);\n    });\n    return str;\n  },\n  diff: function diff(date_a, date_b) {\n    var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DAY;\n    var milliseconds, seconds, hours, minutes, days, months, years;\n    milliseconds = date_a - date_b;\n    seconds = milliseconds / 1000;\n    minutes = seconds / 60;\n    hours = minutes / 60;\n    days = hours / 24;\n    months = days / 30;\n    years = months / 12;\n\n    if (!scale.endsWith('s')) {\n      scale += 's';\n    }\n\n    return Math.floor({\n      milliseconds: milliseconds,\n      seconds: seconds,\n      minutes: minutes,\n      hours: hours,\n      days: days,\n      months: months,\n      years: years\n    }[scale]);\n  },\n  today: function today() {\n    var vals = this.get_date_values(new Date()).slice(0, 3);\n    return _construct(Date, _toConsumableArray(vals));\n  },\n  now: function now() {\n    return new Date();\n  },\n  add: function add(date, qty, scale) {\n    qty = parseInt(qty, 10);\n    var vals = [date.getFullYear() + (scale === YEAR ? qty : 0), date.getMonth() + (scale === MONTH ? qty : 0), date.getDate() + (scale === DAY ? qty : 0), date.getHours() + (scale === HOUR ? qty : 0), date.getMinutes() + (scale === MINUTE ? qty : 0), date.getSeconds() + (scale === SECOND ? qty : 0), date.getMilliseconds() + (scale === MILLISECOND ? qty : 0)];\n    return _construct(Date, vals);\n  },\n  start_of: function start_of(date, scale) {\n    var _scores;\n\n    var scores = (_scores = {}, _defineProperty(_scores, YEAR, 6), _defineProperty(_scores, MONTH, 5), _defineProperty(_scores, DAY, 4), _defineProperty(_scores, HOUR, 3), _defineProperty(_scores, MINUTE, 2), _defineProperty(_scores, SECOND, 1), _defineProperty(_scores, MILLISECOND, 0), _scores);\n\n    function should_reset(_scale) {\n      var max_score = scores[scale];\n      return scores[_scale] <= max_score;\n    }\n\n    var vals = [date.getFullYear(), should_reset(YEAR) ? 0 : date.getMonth(), should_reset(MONTH) ? 1 : date.getDate(), should_reset(DAY) ? 0 : date.getHours(), should_reset(HOUR) ? 0 : date.getMinutes(), should_reset(MINUTE) ? 0 : date.getSeconds(), should_reset(SECOND) ? 0 : date.getMilliseconds()];\n    return _construct(Date, vals);\n  },\n  clone: function clone(date) {\n    return _construct(Date, _toConsumableArray(this.get_date_values(date)));\n  },\n  get_date_values: function get_date_values(date) {\n    return [date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()];\n  },\n  get_days_in_month: function get_days_in_month(date) {\n    var no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    var month = date.getMonth();\n\n    if (month !== 1) {\n      return no_of_days[month];\n    } // Feb\n\n\n    var year = date.getFullYear();\n\n    if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {\n      return 29;\n    }\n\n    return 28;\n  }\n}; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\n\nfunction padStart(str, targetLength, padString) {\n  str = str + '';\n  targetLength = targetLength >> 0;\n  padString = String(typeof padString !== 'undefined' ? padString : ' ');\n\n  if (str.length > targetLength) {\n    return String(str);\n  } else {\n    targetLength = targetLength - str.length;\n\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length);\n    }\n\n    return padString.slice(0, targetLength) + String(str);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}