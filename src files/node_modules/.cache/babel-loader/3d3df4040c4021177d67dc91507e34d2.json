{"ast":null,"code":"export function $(expr, con) {\n  return typeof expr === 'string' ? (con || document).querySelector(expr) : expr || null;\n}\nexport function createSVG(tag, attrs) {\n  var elem = document.createElementNS('http://www.w3.org/2000/svg', tag);\n\n  for (var attr in attrs) {\n    if (attr === 'append_to') {\n      var parent = attrs.append_to;\n      parent.appendChild(elem);\n    } else if (attr === 'innerHTML') {\n      elem.innerHTML = attrs.innerHTML;\n    } else {\n      elem.setAttribute(attr, attrs[attr]);\n    }\n  }\n\n  return elem;\n}\nexport function animateSVG(svgElement, attr, from, to) {\n  var animatedSvgElement = getAnimationElement(svgElement, attr, from, to);\n\n  if (animatedSvgElement === svgElement) {\n    // triggered 2nd time programmatically\n    // trigger artificial click event\n    var event = document.createEvent('HTMLEvents');\n    event.initEvent('click', true, true);\n    event.eventName = 'click';\n    animatedSvgElement.dispatchEvent(event);\n  }\n}\n\nfunction getAnimationElement(svgElement, attr, from, to) {\n  var dur = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '0.4s';\n  var begin = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '0.1s';\n  var animEl = svgElement.querySelector('animate');\n\n  if (animEl) {\n    $.attr(animEl, {\n      attributeName: attr,\n      from: from,\n      to: to,\n      dur: dur,\n      begin: 'click + ' + begin // artificial click\n\n    });\n    return svgElement;\n  }\n\n  var animateElement = createSVG('animate', {\n    attributeName: attr,\n    from: from,\n    to: to,\n    dur: dur,\n    begin: begin,\n    calcMode: 'spline',\n    values: from + ';' + to,\n    keyTimes: '0; 1',\n    keySplines: cubic_bezier('ease-out')\n  });\n  svgElement.appendChild(animateElement);\n  return svgElement;\n}\n\nfunction cubic_bezier(name) {\n  return {\n    ease: '.25 .1 .25 1',\n    linear: '0 0 1 1',\n    'ease-in': '.42 0 1 1',\n    'ease-out': '0 0 .58 1',\n    'ease-in-out': '.42 0 .58 1'\n  }[name];\n}\n\n$.on = function (element, event, selector, callback) {\n  if (!callback) {\n    callback = selector;\n    $.bind(element, event, callback);\n  } else {\n    $.delegate(element, event, selector, callback);\n  }\n};\n\n$.off = function (element, event, handler) {\n  element.removeEventListener(event, handler);\n};\n\n$.bind = function (element, event, callback) {\n  event.split(/\\s+/).forEach(function (event) {\n    element.addEventListener(event, callback);\n  });\n};\n\n$.delegate = function (element, event, selector, callback) {\n  element.addEventListener(event, function (e) {\n    var delegatedTarget = e.target.closest(selector);\n\n    if (delegatedTarget) {\n      e.delegatedTarget = delegatedTarget;\n      callback.call(this, e, delegatedTarget);\n    }\n  });\n};\n\n$.closest = function (selector, element) {\n  if (!element) return null;\n\n  if (element.matches(selector)) {\n    return element;\n  }\n\n  return $.closest(selector, element.parentNode);\n};\n\n$.attr = function (element, attr, value) {\n  if (!value && typeof attr === 'string') {\n    return element.getAttribute(attr);\n  }\n\n  if (typeof attr === 'object') {\n    for (var key in attr) {\n      $.attr(element, key, attr[key]);\n    }\n\n    return;\n  }\n\n  element.setAttribute(attr, value);\n};","map":null,"metadata":{},"sourceType":"module"}