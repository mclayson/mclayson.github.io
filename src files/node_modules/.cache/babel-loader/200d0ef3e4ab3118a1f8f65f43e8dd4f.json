{"ast":null,"code":"import _classCallCheck from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/matt/Work/Projul/projul-prototype/src/components/editor.js\";\nimport React from 'react';\nimport RichTextEditor from 'react-rte';\n\nvar Editor =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Editor, _React$Component);\n\n  function Editor() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Editor);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Editor)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      value: RichTextEditor.createEmptyValue()\n    };\n\n    _this.onChange = function (value) {\n      _this.setState({\n        value: value\n      });\n\n      if (_this.props.onChange) {\n        // Send the changes up to the parent component as an HTML string.\n        // This is here to demonstrate using `.toString()` but in a real app it\n        // would be better to avoid generating a string on each change.\n        _this.props.onChange(value.toString('html'));\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Editor, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(RichTextEditor, {\n        className: \"editor\",\n        value: this.state.value,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Editor;\n}(React.Component);\n\nexport default Editor;","map":{"version":3,"sources":["/Users/matt/Work/Projul/projul-prototype/src/components/editor.js"],"names":["React","RichTextEditor","Editor","state","value","createEmptyValue","onChange","setState","props","toString","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,WAA3B;;IAEMC,M;;;;;;;;;;;;;;;;;UAGJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAEH,cAAc,CAACI,gBAAf;AADD,K;;UAIRC,Q,GAAW,UAACF,KAAD,EAAW;AACpB,YAAKG,QAAL,CAAc;AAACH,QAAAA,KAAK,EAALA;AAAD,OAAd;;AACA,UAAI,MAAKI,KAAL,CAAWF,QAAf,EAAyB;AACvB;AACA;AACA;AACA,cAAKE,KAAL,CAAWF,QAAX,CACEF,KAAK,CAACK,QAAN,CAAe,MAAf,CADF;AAGD;AACF,K;;;;;;;6BAES;AACR,aACE,oBAAC,cAAD;AACE,QAAA,SAAS,EAAC,QADZ;AAEE,QAAA,KAAK,EAAE,KAAKN,KAAL,CAAWC,KAFpB;AAGE,QAAA,QAAQ,EAAE,KAAKE,QAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;;;;EA3BkBN,KAAK,CAACU,S;;AA8B3B,eAAeR,MAAf","sourcesContent":["import React from 'react';\nimport RichTextEditor from 'react-rte';\n\nclass Editor extends React.Component {\n\n\n  state = {\n    value: RichTextEditor.createEmptyValue()\n  }\n\n  onChange = (value) => {\n    this.setState({value});\n    if (this.props.onChange) {\n      // Send the changes up to the parent component as an HTML string.\n      // This is here to demonstrate using `.toString()` but in a real app it\n      // would be better to avoid generating a string on each change.\n      this.props.onChange(\n        value.toString('html')\n      );\n    }\n  };\n\n  render () {\n    return (\n      <RichTextEditor\n        className=\"editor\"\n        value={this.state.value}\n        onChange={this.onChange}\n      />\n    );\n  }\n}\n\nexport default Editor\n"]},"metadata":{},"sourceType":"module"}