{"ast":null,"code":"import _toConsumableArray from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/matt/Work/Projul/projul-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\nimport './gantt.scss';\n\nvar Gantt =\n/*#__PURE__*/\nfunction () {\n  function Gantt(wrapper, tasks, options) {\n    _classCallCheck(this, Gantt);\n\n    this.setup_wrapper(wrapper);\n    this.setup_options(options);\n    this.setup_tasks(tasks); // initialize with default view mode\n\n    this.change_view_mode();\n    this.bind_events();\n  }\n\n  _createClass(Gantt, [{\n    key: \"setup_wrapper\",\n    value: function setup_wrapper(element) {\n      var svg_element, wrapper_element; // CSS Selector is passed\n\n      if (typeof element === 'string') {\n        element = document.querySelector(element);\n      } // get the SVGElement\n\n\n      if (element instanceof HTMLElement) {\n        wrapper_element = element;\n        svg_element = element.querySelector('svg');\n      } else if (element instanceof SVGElement) {\n        svg_element = element;\n      } else {\n        throw new TypeError('FrappÃ© Gantt only supports usage of a string CSS selector,' + \" HTML DOM element or SVG DOM element for the 'element' parameter\");\n      } // svg element\n\n\n      if (!svg_element) {\n        // create it\n        this.$svg = createSVG('svg', {\n          append_to: wrapper_element,\n          class: 'gantt'\n        });\n      } else {\n        this.$svg = svg_element;\n        this.$svg.classList.add('gantt');\n      } // wrapper element\n\n\n      this.$container = document.createElement('div');\n      this.$container.classList.add('gantt-container');\n      var parent_element = this.$svg.parentElement;\n      parent_element.appendChild(this.$container);\n      this.$container.appendChild(this.$svg); // popup wrapper\n\n      this.popup_wrapper = document.createElement('div');\n      this.popup_wrapper.classList.add('popup-wrapper');\n      this.$container.appendChild(this.popup_wrapper);\n    }\n  }, {\n    key: \"setup_options\",\n    value: function setup_options(options) {\n      var default_options = {\n        header_height: 50,\n        column_width: 30,\n        step: 24,\n        view_modes: ['Quarter Day', 'Half Day', 'Day', 'Week', 'Month'],\n        bar_height: 20,\n        bar_corner_radius: 3,\n        arrow_curve: 5,\n        padding: 18,\n        view_mode: 'Day',\n        date_format: 'YYYY-MM-DD',\n        popup_trigger: 'click',\n        custom_popup_html: null\n      };\n      this.options = Object.assign({}, default_options, options);\n    }\n  }, {\n    key: \"setup_tasks\",\n    value: function setup_tasks(tasks) {\n      // prepare tasks\n      this.tasks = tasks.map(function (task, i) {\n        // convert to Date objects\n        task._start = date_utils.parse(task.start);\n        task._end = date_utils.parse(task.end); // make task invalid if duration too large\n\n        if (date_utils.diff(task._end, task._start, 'year') > 10) {\n          task.end = null;\n        } // cache index\n\n\n        task._index = i; // invalid dates\n\n        if (!task.start && !task.end) {\n          var today = date_utils.today();\n          task._start = today;\n          task._end = date_utils.add(today, 2, 'day');\n        }\n\n        if (!task.start && task.end) {\n          task._start = date_utils.add(task._end, -2, 'day');\n        }\n\n        if (task.start && !task.end) {\n          task._end = date_utils.add(task._start, 2, 'day');\n        } // if hours is not set, assume the last day is full day\n        // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n\n\n        var task_end_values = date_utils.get_date_values(task._end);\n\n        if (task_end_values.slice(3).every(function (d) {\n          return d === 0;\n        })) {\n          task._end = date_utils.add(task._end, 24, 'hour');\n        } // invalid flag\n\n\n        if (!task.start || !task.end) {\n          task.invalid = true;\n        } // dependencies\n\n\n        if (typeof task.dependencies === 'string' || !task.dependencies) {\n          var deps = [];\n\n          if (task.dependencies) {\n            deps = task.dependencies.split(',').map(function (d) {\n              return d.trim();\n            }).filter(function (d) {\n              return d;\n            });\n          }\n\n          task.dependencies = deps;\n        } // uids\n\n\n        if (!task.id) {\n          task.id = generate_id(task);\n        }\n\n        return task;\n      });\n      this.setup_dependencies();\n    }\n  }, {\n    key: \"setup_dependencies\",\n    value: function setup_dependencies() {\n      this.dependency_map = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.tasks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var t = _step.value;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = t.dependencies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var d = _step2.value;\n              this.dependency_map[d] = this.dependency_map[d] || [];\n              this.dependency_map[d].push(t.id);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh(tasks) {\n      this.setup_tasks(tasks);\n      this.change_view_mode();\n    }\n  }, {\n    key: \"change_view_mode\",\n    value: function change_view_mode() {\n      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.view_mode;\n      this.update_view_scale(mode);\n      this.setup_dates();\n      this.render(); // fire viewmode_change event\n\n      this.trigger_event('view_change', [mode]);\n    }\n  }, {\n    key: \"update_view_scale\",\n    value: function update_view_scale(view_mode) {\n      this.options.view_mode = view_mode;\n\n      if (view_mode === 'Day') {\n        this.options.step = 24;\n        this.options.column_width = 38;\n      } else if (view_mode === 'Half Day') {\n        this.options.step = 24 / 2;\n        this.options.column_width = 38;\n      } else if (view_mode === 'Quarter Day') {\n        this.options.step = 24 / 4;\n        this.options.column_width = 38;\n      } else if (view_mode === 'Week') {\n        this.options.step = 24 * 7;\n        this.options.column_width = 140;\n      } else if (view_mode === 'Month') {\n        this.options.step = 24 * 30;\n        this.options.column_width = 120;\n      }\n    }\n  }, {\n    key: \"setup_dates\",\n    value: function setup_dates() {\n      this.setup_gantt_dates();\n      this.setup_date_values();\n    }\n  }, {\n    key: \"setup_gantt_dates\",\n    value: function setup_gantt_dates() {\n      this.gantt_start = this.gantt_end = null;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.tasks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var task = _step3.value;\n\n          // set global start and end date\n          if (!this.gantt_start || task._start < this.gantt_start) {\n            this.gantt_start = task._start;\n          }\n\n          if (!this.gantt_end || task._end > this.gantt_end) {\n            this.gantt_end = task._end;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n      this.gantt_end = date_utils.start_of(this.gantt_end, 'day'); // add date padding on both sides\n\n      if (this.view_is(['Quarter Day', 'Half Day'])) {\n        this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n        this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n      } else if (this.view_is('Month')) {\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\n        this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\n      } else {\n        this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\n        this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\n      }\n    }\n  }, {\n    key: \"setup_date_values\",\n    value: function setup_date_values() {\n      this.dates = [];\n      var cur_date = null;\n\n      while (cur_date === null || cur_date < this.gantt_end) {\n        if (!cur_date) {\n          cur_date = date_utils.clone(this.gantt_start);\n        } else {\n          cur_date = this.view_is('Month') ? date_utils.add(cur_date, 1, 'month') : date_utils.add(cur_date, this.options.step, 'hour');\n        }\n\n        this.dates.push(cur_date);\n      }\n    }\n  }, {\n    key: \"bind_events\",\n    value: function bind_events() {\n      this.bind_grid_click();\n      this.bind_bar_events();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.clear();\n      this.setup_layers();\n      this.make_grid();\n      this.make_dates();\n      this.make_bars();\n      this.make_arrows();\n      this.map_arrows_on_bars();\n      this.set_width();\n      this.set_scroll_position();\n    }\n  }, {\n    key: \"setup_layers\",\n    value: function setup_layers() {\n      this.layers = {};\n      var layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details']; // make group layers\n\n      for (var _i = 0; _i < layers.length; _i++) {\n        var layer = layers[_i];\n        this.layers[layer] = createSVG('g', {\n          class: layer,\n          append_to: this.$svg\n        });\n      }\n    }\n  }, {\n    key: \"make_grid\",\n    value: function make_grid() {\n      this.make_grid_background();\n      this.make_grid_rows();\n      this.make_grid_header();\n      this.make_grid_ticks();\n      this.make_grid_highlights();\n    }\n  }, {\n    key: \"make_grid_background\",\n    value: function make_grid_background() {\n      var grid_width = this.dates.length * this.options.column_width;\n      var grid_height = this.options.header_height + this.options.padding + (this.options.bar_height + this.options.padding) * this.tasks.length;\n      createSVG('rect', {\n        x: 0,\n        y: 0,\n        width: grid_width,\n        height: grid_height,\n        class: 'grid-background',\n        append_to: this.layers.grid\n      });\n      $.attr(this.$svg, {\n        height: grid_height + this.options.padding + 100,\n        width: '100%'\n      });\n    }\n  }, {\n    key: \"make_grid_rows\",\n    value: function make_grid_rows() {\n      var rows_layer = createSVG('g', {\n        append_to: this.layers.grid\n      });\n      var lines_layer = createSVG('g', {\n        append_to: this.layers.grid\n      });\n      var row_width = this.dates.length * this.options.column_width;\n      var row_height = this.options.bar_height + this.options.padding;\n      var row_y = this.options.header_height + this.options.padding / 2;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = this.tasks[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var task = _step4.value;\n          createSVG('rect', {\n            x: 0,\n            y: row_y,\n            width: row_width,\n            height: row_height,\n            class: 'grid-row',\n            append_to: rows_layer\n          });\n          createSVG('line', {\n            x1: 0,\n            y1: row_y + row_height,\n            x2: row_width,\n            y2: row_y + row_height,\n            class: 'row-line',\n            append_to: lines_layer\n          });\n          row_y += this.options.bar_height + this.options.padding;\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"make_grid_header\",\n    value: function make_grid_header() {\n      var header_width = this.dates.length * this.options.column_width;\n      var header_height = this.options.header_height + 10;\n      createSVG('rect', {\n        x: 0,\n        y: 0,\n        width: header_width,\n        height: header_height,\n        class: 'grid-header',\n        append_to: this.layers.grid\n      });\n    }\n  }, {\n    key: \"make_grid_ticks\",\n    value: function make_grid_ticks() {\n      var tick_x = 0;\n      var tick_y = this.options.header_height + this.options.padding / 2;\n      var tick_height = (this.options.bar_height + this.options.padding) * this.tasks.length;\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = this.dates[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var date = _step5.value;\n          var tick_class = 'tick'; // thick tick for monday\n\n          if (this.view_is('Day') && date.getDate() === 1) {\n            tick_class += ' thick';\n          } // thick tick for first week\n\n\n          if (this.view_is('Week') && date.getDate() >= 1 && date.getDate() < 8) {\n            tick_class += ' thick';\n          } // thick ticks for quarters\n\n\n          if (this.view_is('Month') && (date.getMonth() + 1) % 3 === 0) {\n            tick_class += ' thick';\n          }\n\n          createSVG('path', {\n            d: \"M \".concat(tick_x, \" \").concat(tick_y, \" v \").concat(tick_height),\n            class: tick_class,\n            append_to: this.layers.grid\n          });\n\n          if (this.view_is('Month')) {\n            tick_x += date_utils.get_days_in_month(date) * this.options.column_width / 30;\n          } else {\n            tick_x += this.options.column_width;\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"make_grid_highlights\",\n    value: function make_grid_highlights() {\n      // highlight today's date\n      if (this.view_is('Day')) {\n        var x = date_utils.diff(date_utils.today(), this.gantt_start, 'hour') / this.options.step * this.options.column_width;\n        var y = 0;\n        var width = this.options.column_width;\n        var height = (this.options.bar_height + this.options.padding) * this.tasks.length + this.options.header_height + this.options.padding / 2;\n        createSVG('rect', {\n          x: x,\n          y: y,\n          width: width,\n          height: height,\n          class: 'today-highlight',\n          append_to: this.layers.grid\n        });\n      }\n    }\n  }, {\n    key: \"make_dates\",\n    value: function make_dates() {\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = this.get_dates_to_draw()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var date = _step6.value;\n          createSVG('text', {\n            x: date.lower_x,\n            y: date.lower_y,\n            innerHTML: date.lower_text,\n            class: 'lower-text',\n            append_to: this.layers.date\n          });\n\n          if (date.upper_text) {\n            var $upper_text = createSVG('text', {\n              x: date.upper_x,\n              y: date.upper_y,\n              innerHTML: date.upper_text,\n              class: 'upper-text',\n              append_to: this.layers.date\n            }); // remove out-of-bound dates\n\n            if ($upper_text.getBBox().x2 > this.layers.grid.getBBox().width) {\n              $upper_text.remove();\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"get_dates_to_draw\",\n    value: function get_dates_to_draw() {\n      var _this = this;\n\n      var last_date = null;\n      var dates = this.dates.map(function (date, i) {\n        var d = _this.get_date_info(date, last_date, i);\n\n        last_date = date;\n        return d;\n      });\n      return dates;\n    }\n  }, {\n    key: \"get_date_info\",\n    value: function get_date_info(date, last_date, i) {\n      if (!last_date) {\n        last_date = date_utils.add(date, 1, 'year');\n      }\n\n      var date_text = {\n        'Quarter Day_lower': date_utils.format(date, 'HH'),\n        'Half Day_lower': date_utils.format(date, 'HH'),\n        Day_lower: date.getDate() !== last_date.getDate() ? date_utils.format(date, 'D') : '',\n        Week_lower: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'D MMM') : date_utils.format(date, 'D'),\n        Month_lower: date_utils.format(date, 'MMMM'),\n        'Quarter Day_upper': date.getDate() !== last_date.getDate() ? date_utils.format(date, 'D MMM') : '',\n        'Half Day_upper': date.getDate() !== last_date.getDate() ? date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'D MMM') : date_utils.format(date, 'D') : '',\n        Day_upper: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'MMMM') : '',\n        Week_upper: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'MMMM') : '',\n        Month_upper: date.getFullYear() !== last_date.getFullYear() ? date_utils.format(date, 'YYYY') : ''\n      };\n      var base_pos = {\n        x: i * this.options.column_width,\n        lower_y: this.options.header_height,\n        upper_y: this.options.header_height - 25\n      };\n      var x_pos = {\n        'Quarter Day_lower': this.options.column_width * 4 / 2,\n        'Quarter Day_upper': 0,\n        'Half Day_lower': this.options.column_width * 2 / 2,\n        'Half Day_upper': 0,\n        Day_lower: this.options.column_width / 2,\n        Day_upper: this.options.column_width * 30 / 2,\n        Week_lower: 0,\n        Week_upper: this.options.column_width * 4 / 2,\n        Month_lower: this.options.column_width / 2,\n        Month_upper: this.options.column_width * 12 / 2\n      };\n      return {\n        upper_text: date_text[\"\".concat(this.options.view_mode, \"_upper\")],\n        lower_text: date_text[\"\".concat(this.options.view_mode, \"_lower\")],\n        upper_x: base_pos.x + x_pos[\"\".concat(this.options.view_mode, \"_upper\")],\n        upper_y: base_pos.upper_y,\n        lower_x: base_pos.x + x_pos[\"\".concat(this.options.view_mode, \"_lower\")],\n        lower_y: base_pos.lower_y\n      };\n    }\n  }, {\n    key: \"make_bars\",\n    value: function make_bars() {\n      var _this2 = this;\n\n      this.bars = this.tasks.map(function (task) {\n        var bar = new Bar(_this2, task);\n\n        _this2.layers.bar.appendChild(bar.group);\n\n        return bar;\n      });\n    }\n  }, {\n    key: \"make_arrows\",\n    value: function make_arrows() {\n      var _this3 = this;\n\n      this.arrows = [];\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var task = _step7.value;\n          var arrows = [];\n          arrows = task.dependencies.map(function (task_id) {\n            var dependency = _this3.get_task(task_id);\n\n            if (!dependency) return;\n            var arrow = new Arrow(_this3, _this3.bars[dependency._index], // from_task\n            _this3.bars[task._index] // to_task\n            );\n\n            _this3.layers.arrow.appendChild(arrow.element);\n\n            return arrow;\n          }).filter(Boolean); // filter falsy values\n\n          _this3.arrows = _this3.arrows.concat(arrows);\n        };\n\n        for (var _iterator7 = this.tasks[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"map_arrows_on_bars\",\n    value: function map_arrows_on_bars() {\n      var _this4 = this;\n\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        var _loop2 = function _loop2() {\n          var bar = _step8.value;\n          bar.arrows = _this4.arrows.filter(function (arrow) {\n            return arrow.from_task.task.id === bar.task.id || arrow.to_task.task.id === bar.task.id;\n          });\n        };\n\n        for (var _iterator8 = this.bars[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          _loop2();\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"set_width\",\n    value: function set_width() {\n      var cur_width = this.$svg.getBoundingClientRect().width;\n      var actual_width = this.$svg.querySelector('.grid .grid-row').getAttribute('width');\n\n      if (cur_width < actual_width) {\n        this.$svg.setAttribute('width', actual_width);\n      }\n    }\n  }, {\n    key: \"set_scroll_position\",\n    value: function set_scroll_position() {\n      var parent_element = this.$svg.parentElement;\n      if (!parent_element) return;\n      var hours_before_first_task = date_utils.diff(this.get_oldest_starting_date(), this.gantt_start, 'hour');\n      var scroll_pos = hours_before_first_task / this.options.step * this.options.column_width - this.options.column_width;\n      parent_element.scrollLeft = scroll_pos;\n    }\n  }, {\n    key: \"bind_grid_click\",\n    value: function bind_grid_click() {\n      var _this5 = this;\n\n      $.on(this.$svg, this.options.popup_trigger, '.grid-row, .grid-header', function () {\n        _this5.unselect_all();\n\n        _this5.hide_popup();\n      });\n    }\n  }, {\n    key: \"bind_bar_events\",\n    value: function bind_bar_events() {\n      var _this6 = this;\n\n      var is_dragging = false;\n      var x_on_start = 0;\n      var y_on_start = 0;\n      var is_resizing_left = false;\n      var is_resizing_right = false;\n      var parent_bar_id = null;\n      var bars = []; // instanceof Bar\n\n      this.bar_being_dragged = null;\n\n      function action_in_progress() {\n        return is_dragging || is_resizing_left || is_resizing_right;\n      }\n\n      $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', function (e, element) {\n        var bar_wrapper = $.closest('.bar-wrapper', element);\n\n        if (element.classList.contains('left')) {\n          is_resizing_left = true;\n        } else if (element.classList.contains('right')) {\n          is_resizing_right = true;\n        } else if (element.classList.contains('bar-wrapper')) {\n          is_dragging = true;\n        }\n\n        bar_wrapper.classList.add('active');\n        x_on_start = e.offsetX;\n        y_on_start = e.offsetY;\n        parent_bar_id = bar_wrapper.getAttribute('data-id');\n        var ids = [parent_bar_id].concat(_toConsumableArray(_this6.get_all_dependent_tasks(parent_bar_id)));\n        bars = ids.map(function (id) {\n          return _this6.get_bar(id);\n        });\n        _this6.bar_being_dragged = parent_bar_id;\n        bars.forEach(function (bar) {\n          var $bar = bar.$bar;\n          $bar.ox = $bar.getX();\n          $bar.oy = $bar.getY();\n          $bar.owidth = $bar.getWidth();\n          $bar.finaldx = 0;\n        });\n      });\n      $.on(this.$svg, 'mousemove', function (e) {\n        if (!action_in_progress()) return;\n        var dx = e.offsetX - x_on_start;\n        var dy = e.offsetY - y_on_start;\n        bars.forEach(function (bar) {\n          var $bar = bar.$bar;\n          $bar.finaldx = _this6.get_snap_position(dx);\n\n          if (is_resizing_left) {\n            if (parent_bar_id === bar.task.id) {\n              bar.update_bar_position({\n                x: $bar.ox + $bar.finaldx,\n                width: $bar.owidth - $bar.finaldx\n              });\n            } else {\n              bar.update_bar_position({\n                x: $bar.ox + $bar.finaldx\n              });\n            }\n          } else if (is_resizing_right) {\n            if (parent_bar_id === bar.task.id) {\n              bar.update_bar_position({\n                width: $bar.owidth + $bar.finaldx\n              });\n            }\n          } else if (is_dragging) {\n            bar.update_bar_position({\n              x: $bar.ox + $bar.finaldx\n            });\n          }\n        });\n      });\n      document.addEventListener('mouseup', function (e) {\n        if (is_dragging || is_resizing_left || is_resizing_right) {\n          bars.forEach(function (bar) {\n            return bar.group.classList.remove('active');\n          });\n        }\n\n        is_dragging = false;\n        is_resizing_left = false;\n        is_resizing_right = false;\n      });\n      $.on(this.$svg, 'mouseup', function (e) {\n        _this6.bar_being_dragged = null;\n        bars.forEach(function (bar) {\n          var $bar = bar.$bar;\n          if (!$bar.finaldx) return;\n          bar.date_changed();\n          bar.set_action_completed();\n        });\n      });\n      this.bind_bar_progress();\n    }\n  }, {\n    key: \"bind_bar_progress\",\n    value: function bind_bar_progress() {\n      var _this7 = this;\n\n      var x_on_start = 0;\n      var y_on_start = 0;\n      var is_resizing = null;\n      var bar = null;\n      var $bar_progress = null;\n      var $bar = null;\n      $.on(this.$svg, 'mousedown', '.handle.progress', function (e, handle) {\n        is_resizing = true;\n        x_on_start = e.offsetX;\n        y_on_start = e.offsetY;\n        var $bar_wrapper = $.closest('.bar-wrapper', handle);\n        var id = $bar_wrapper.getAttribute('data-id');\n        bar = _this7.get_bar(id);\n        $bar_progress = bar.$bar_progress;\n        $bar = bar.$bar;\n        $bar_progress.finaldx = 0;\n        $bar_progress.owidth = $bar_progress.getWidth();\n        $bar_progress.min_dx = -$bar_progress.getWidth();\n        $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n      });\n      $.on(this.$svg, 'mousemove', function (e) {\n        if (!is_resizing) return;\n        var dx = e.offsetX - x_on_start;\n        var dy = e.offsetY - y_on_start;\n\n        if (dx > $bar_progress.max_dx) {\n          dx = $bar_progress.max_dx;\n        }\n\n        if (dx < $bar_progress.min_dx) {\n          dx = $bar_progress.min_dx;\n        }\n\n        var $handle = bar.$handle_progress;\n        $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n        $.attr($handle, 'points', bar.get_progress_polygon_points());\n        $bar_progress.finaldx = dx;\n      });\n      $.on(this.$svg, 'mouseup', function () {\n        is_resizing = false;\n        if (!($bar_progress && $bar_progress.finaldx)) return;\n        bar.progress_changed();\n        bar.set_action_completed();\n      });\n    }\n  }, {\n    key: \"get_all_dependent_tasks\",\n    value: function get_all_dependent_tasks(task_id) {\n      var _this8 = this;\n\n      var out = [];\n      var to_process = [task_id];\n\n      while (to_process.length) {\n        var deps = to_process.reduce(function (acc, curr) {\n          acc = acc.concat(_this8.dependency_map[curr]);\n          return acc;\n        }, []);\n        out = out.concat(deps);\n        to_process = deps.filter(function (d) {\n          return !to_process.includes(d);\n        });\n      }\n\n      return out.filter(Boolean);\n    }\n  }, {\n    key: \"get_snap_position\",\n    value: function get_snap_position(dx) {\n      var odx = dx,\n          rem,\n          position;\n\n      if (this.view_is('Week')) {\n        rem = dx % (this.options.column_width / 7);\n        position = odx - rem + (rem < this.options.column_width / 14 ? 0 : this.options.column_width / 7);\n      } else if (this.view_is('Month')) {\n        rem = dx % (this.options.column_width / 30);\n        position = odx - rem + (rem < this.options.column_width / 60 ? 0 : this.options.column_width / 30);\n      } else {\n        rem = dx % this.options.column_width;\n        position = odx - rem + (rem < this.options.column_width / 2 ? 0 : this.options.column_width);\n      }\n\n      return position;\n    }\n  }, {\n    key: \"unselect_all\",\n    value: function unselect_all() {\n      _toConsumableArray(this.$svg.querySelectorAll('.bar-wrapper')).forEach(function (el) {\n        el.classList.remove('active');\n      });\n    }\n  }, {\n    key: \"view_is\",\n    value: function view_is(modes) {\n      var _this9 = this;\n\n      if (typeof modes === 'string') {\n        return this.options.view_mode === modes;\n      }\n\n      if (Array.isArray(modes)) {\n        return modes.some(function (mode) {\n          return _this9.options.view_mode === mode;\n        });\n      }\n\n      return false;\n    }\n  }, {\n    key: \"get_task\",\n    value: function get_task(id) {\n      return this.tasks.find(function (task) {\n        return task.id === id;\n      });\n    }\n  }, {\n    key: \"get_bar\",\n    value: function get_bar(id) {\n      return this.bars.find(function (bar) {\n        return bar.task.id === id;\n      });\n    }\n  }, {\n    key: \"show_popup\",\n    value: function show_popup(options) {\n      if (!this.popup) {\n        this.popup = new Popup(this.popup_wrapper, this.options.custom_popup_html);\n      }\n\n      this.popup.show(options);\n    }\n  }, {\n    key: \"hide_popup\",\n    value: function hide_popup() {\n      this.popup && this.popup.hide();\n    }\n  }, {\n    key: \"trigger_event\",\n    value: function trigger_event(event, args) {\n      if (this.options['on_' + event]) {\n        this.options['on_' + event].apply(null, args);\n      }\n    }\n    /**\n     * Gets the oldest starting date from the list of tasks\n     *\n     * @returns Date\n     * @memberof Gantt\n     */\n\n  }, {\n    key: \"get_oldest_starting_date\",\n    value: function get_oldest_starting_date() {\n      return this.tasks.map(function (task) {\n        return task._start;\n      }).reduce(function (prev_date, cur_date) {\n        return cur_date <= prev_date ? cur_date : prev_date;\n      });\n    }\n    /**\n     * Clear all elements from the parent svg element\n     *\n     * @memberof Gantt\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.$svg.innerHTML = '';\n    }\n  }]);\n\n  return Gantt;\n}();\n\nexport { Gantt as default };\n\nfunction generate_id(task) {\n  return task.name + '_' + Math.random().toString(36).slice(2, 12);\n}","map":null,"metadata":{},"sourceType":"module"}